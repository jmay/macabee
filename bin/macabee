#!/usr/bin/env ruby

require 'macabee'
require 'thor'

class MacabeeCommand < Thor
  no_tasks do
    def macabee(opts = {})
      @macabee ||= Macabee::Contacts.new(opts)
    end
  end

  desc "contacts", "dump all Address Book contacts to a single JSON blob"
  method_option :xref, :desc => "override default 'ab' keyname for reference identifier field"
  def contacts
    jj macabee(options).contacts.map(&:to_hash)
  end

  desc "groups", "dump all Address Book groups to a single JSON blob"
  method_option :xref, :desc => "override default 'ab' keyname for reference identifier field"
  def groups
    jj macabee(options).groups.map(&:to_hash)
  end

  desc "dump", "dump entire Address Book (contacts and groups) to a single JSON blob"
  def dump
    jj macabee.to_hash
  end

  desc "show CONTACT", "dump a single Address Book contact (by UID or name) to JSON"
  def show(*args)
    if args.count > 1
      contact = macabee.lookup(*args)
    else
      contact = macabee.contact(args.first)
    end

    if !contact
      raise "No such person in Address Book '#{args}'"
    end
    jj contact.to_hash
  end

  desc "group GROUP", "dump a single Address Book group (by UID or name) to JSON, with just the UID values of the members"
  def group(arg)
    group = macabee.group(arg)
    if !group
      group = macabee.group_lookup(arg)
    end
    if !group
      raise "No such group in Address Book '#{arg}'"
    end
    jj group.to_hash
  end

  desc "members GROUP", "dump the members of a single Address Book group (by UID or name) to JSON"
  def members(arg)
    group = macabee.group(arg)
    if !group
      group = macabee.group_lookup(arg)
    end
    if !group
      raise "No such group in Address Book '#{arg}'"
    end
    jj group.members.map(&:to_hash)
  end

  desc "revisions JSONFILE", "compute deltas required to revise the inbound JSON to be in sync with the local Address Book"
  method_option :entire, :type => :boolean, :desc => "compare the entire Address Book, output record adds & deletes"
  method_option :xref, :required => true, :desc => "external reference field, must appear under xref key"
  def revisions(jsonfile)
    input = JSON.load(File.open(jsonfile))
    revisions = macabee.revise(input, :additions => options[:entire], :xref => options[:xref])
    jj revisions
  end

  desc "grouprevs JSONFILE", "compute deltas required to revise the inbound JSON to be in sync with the local Address Book"
  method_option :entire, :type => :boolean, :desc => "compare the entire Address Book, output record adds & deletes"
  method_option :xref, :required => true, :desc => "external reference field, must appear under xref key"
  def grouprevs(jsonfile)
    input = JSON.load(File.open(jsonfile))
    revisions = macabee.revise_groups(input, :additions => options[:entire], :xref => options[:xref])
    jj revisions
  end


  desc "compare JSONFILE", "compute deltas required to alter the local Address Book to match the data in the input JSON"
  def compare(jsonfile)
    input = JSON.load(File.open(jsonfile))
    input = [input] if input.is_a?(Hash) # for a single-record compare

    diffs = input.map do |contact_hash|
      macabee.diff(contact_hash)
    end.compact
    if diffs.any?
      jj diffs
      $stderr.puts "Found changes in #{diffs.count} out of #{input.count} records."
    else
      $stderr.puts "No changes in #{input.count} records."
    end
  end

  desc "apply JSONFILE", "update local Address Book by applying deltas computed from the `compare` step"
  method_option :dryrun, :type => :boolean, :desc => "stage the changes but do not save to the AB database"
  def apply(jsonfile)
    changes = JSON.load(File.open(jsonfile))
    additions = []
    changes.each do |uid, deltas|
      # each record is a pair [id, instructions]
      # if id is not-nil, then instructions are an array of diffs
      # if id is nil, then instructions are a hash that represents an entire new record
      contact = uid ? macabee.contact(uid) : macabee.blank_contact
      additions << contact if uid.nil?

      contact.apply(deltas)
    end

    $stderr.puts "Applying #{additions.count} new contacts, #{changes.count - additions.count} updates."
    if options[:dryrun]
      $stderr.puts "(changes not applied to Address Book)"
    else
      macabee.save!(additions)
    end
  end

  desc "version", "show Macabee version"
  def version
    puts "Macabee #{Macabee::VERSION}"
  end
end

MacabeeCommand.start
