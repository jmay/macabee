#!/usr/bin/env ruby

require 'rubygems'
require 'macabee'
require "json"

ab = Macabee::Contacts.new

command, *args = ARGV
arg = args.first

case command
when 'dump'
  puts JSON.pretty_generate(ab.to_hash)

when 'groups'
  puts JSON.pretty_generate(ab.groups.map(&:to_hash))

when 'contacts'
  puts JSON.pretty_generate(ab.contacts.map(&:to_hash))

when 'contact'
  if contact = ab.contact(arg)
    puts JSON.pretty_generate(contact.to_hash)
  else
    raise "No such person in Address Book '#{arg}'"
  end

when 'lookup'
  firstname, lastname = args
  if contact = ab.lookup(firstname, lastname)
    puts JSON.pretty_generate(contact.to_hash)
  else
    raise "No such person in Address Book '#{arg}'"
  end

when 'group'
  if group = ab.group(arg)
    puts JSON.pretty_generate(group.to_hash)
  else
    raise "No such group in Address Book '#{arg}'"
  end

when 'compare'
  # look in file for a JSON representation and compare it to version in the AB
  data = JSON.load(File.open(arg))
  case data
  when Hash
    diffs = ab.diff(data)
    if diffs.any?
      puts JSON.pretty_generate(diffs)
      # contact.patch(diffs)
    else
      puts "No changes."
    end

  when Array
    diffs = data.map do |hash|
      ab.diff(hash)
    end
    puts JSON.pretty_generate(diffs)

  else
    raise "Bad object #{data.class} in input"
  end

when 'update'
  # same as 'compare', except that the changes should be applied back to the record
  data = JSON.load(File.open(arg))
  ab.apply(data)
  unless args.include?('nosave')
    ab.save!
    $stderr.puts "Saved."
  end

else
  raise "Unknown command '#{command}'"
end
