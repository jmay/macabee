#!/usr/bin/env ruby

require 'rubygems'
require 'macabee'
require "json"

ab = Macabee::Contacts.new

command, *args = ARGV
arg = args.first

case command
when 'dump'
  puts JSON.pretty_generate(ab.to_hash)

when 'groups'
  puts JSON.pretty_generate(ab.groups.map(&:to_hash))

when 'contacts'
  puts JSON.pretty_generate(ab.contacts.map(&:to_hash))

when 'contact'
  if contact = ab.contact(arg)
    puts JSON.pretty_generate(contact.to_hash)
  else
    raise "No such person in Address Book '#{arg}'"
  end

when 'lookup'
  firstname, lastname = args
  if contact = ab.lookup(firstname, lastname)
    puts JSON.pretty_generate(contact.to_hash)
  else
    raise "No such person in Address Book '#{arg}'"
  end

when 'group'
  if group = ab.group(arg)
    puts JSON.pretty_generate(group.to_hash)
  else
    raise "No such group in Address Book '#{arg}'"
  end

when 'members'
  if group = ab.group(arg)
    puts JSON.pretty_generate(group.members.map {|p| p.to_hash})
  else
    raise "No such group in Address Book '#{arg}'"
  end

when 'compare'
  # look in file for a JSON representation and compare it to version in the AB
  data = JSON.load(File.open(arg))
  case data
  when Hash
    diffs = ab.diff(data)
    if args.include?('xref')
      # only consider xref (KABUIDProperty) changes
      diffs = diffs.select {|d| d[1] == 'xref.ab'}
    end

    if diffs.any?
      puts JSON.pretty_generate(diffs)
      # contact.patch(diffs)
    else
      $stderr.puts "No changes."
    end

  when Array
    diffs = data.map do |hash|
      ab.diff(hash)
    end.compact
    if diffs.any?
      puts JSON.pretty_generate(diffs)
    else
      $stderr.puts "No changes."
    end

  else
    raise "Bad object #{data.class} in input"
  end

when 'update'
  # same as 'compare', except that the changes should be applied back to the record
  data = JSON.load(File.open(arg))
  case data
  when Hash
    contact = ab.apply(data)
    unless args.include?('nosave')
      ab.save!
      $stderr.puts "Saved #{contact}"
    end

  when Array
    data.each do |rec|
      begin
        contact = ab.apply(rec)
        unless args.include?('nosave')
          ab.save!
          $stderr.puts "Saved #{contact}"
        end
      rescue Exception => e
        $stderr.puts "Update failed: #{e.message}"
        $stderr.puts e.backtrace.map{|s| "\t#{s}"}
      end
    end

  else
    raise "Bad object #{data.class} in input"
  end


when 'apply'
  # input JSON is treated as output from the 'compare' stage above
  # assume that no local changes have occurred since the 'compare' was run, and apply these deltas
  changes = JSON.load(File.open(arg))
  changes.each do |uid, rule|
    # each record is a pair [id, instructions]
    # if id is not-nil, then instructions are an array of diffs
    # if id is nil, then instructions are a hash that represents an entire new record
    case uid
    when nil
      # addition
      contact = Macabee::Contact.new
      contact.apply(rule)
    else
      # update
      contact = ab.contact(uid)
      contact.apply(rule)
    end
    ab.save!
  end

when 'revise'
  jsonfile, hint = args

  # compare the contacts in the input JSON against what is currently in AB
  # generate instructions to update the input to reflect the AB state
  data = JSON.load(File.open(jsonfile))
  revisions = ab.revise(data, :additions => (hint == 'entire'))
  puts JSON.pretty_generate(revisions)


else
  raise "Unknown command '#{command}'"
end
